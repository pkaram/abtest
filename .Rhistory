ggplot2::geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
ggplot2::scale_fill_manual(values=c("#69b3a2", "#404080")) +
ggplot2::ggtitle(label = paste0('Side by side Sample histograms')) +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples
#'@return p-value of test along with a histogram
t_test_two_sample <- function(x1,x2) {
m1 <- mean(x1)
m2 <- mean(x2)
sd1 <- sqrt(sum((m1-x1)**2)/length(x1))
sd2 <- sqrt(sum((m2-x2)**2)/length(x2))
m_diff <- m1-m2
sd_pooled <- (((length(x1)-1)*(sd1**2)) + ((length(x2)-1)*(sd2**2)))/ (length(x1)+length(x2)-2)
t <- m_diff/(sqrt(sd_pooled)*sqrt(1/length(x1)+1/length(x2)))
p_value <- round(2*pt(-abs(t),df=length(x1)+length(x2)-2,lower.tail=TRUE),3)
print(paste0("p-value:",p_value," , H_0: samples' mean equal"))
#create histogram
p <- ggplot2::ggplot( data = rbind(data.frame(
group=c(rep("x1",length(x1)),rep("x2",length(x2))),
values=c(x1,x2))),ggplot2::aes(x=values, fill=group)) +
ggplot2::geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
ggplot2::scale_fill_manual(values=c("#69b3a2", "#404080")) +
ggplot2::ggtitle(label = paste0('Side by side Sample histograms')) +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
hrbrthemes::theme_ipsum() +
ggplot2::labs(fill="")
suppressMessages(print(p))
}
t_test_two_sample(x1,x2)
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples
#'@return p-value of test along with a histogram
t_test_two_sample <- function(x1,x2) {
m1 <- mean(x1)
m2 <- mean(x2)
sd1 <- sqrt(sum((m1-x1)**2)/length(x1))
sd2 <- sqrt(sum((m2-x2)**2)/length(x2))
m_diff <- m1-m2
sd_pooled <- (((length(x1)-1)*(sd1**2)) + ((length(x2)-1)*(sd2**2)))/ (length(x1)+length(x2)-2)
t <- m_diff/(sqrt(sd_pooled)*sqrt(1/length(x1)+1/length(x2)))
p_value <- round(2*pt(-abs(t),df=length(x1)+length(x2)-2,lower.tail=TRUE),3)
print(paste0("p-value:",p_value," , H_0: samples' mean equal"))
#create histogram
p <- ggplot2::ggplot( data = rbind(data.frame(
group=c(rep("x1",length(x1)),rep("x2",length(x2))),
values=c(x1,x2))),ggplot2::aes(x=values, fill=group)) +
ggplot2::geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
ggplot2::scale_fill_manual(values=c("#69b3a2", "#404080")) +
ggplot2::ggtitle(label = paste0('Side by side Sample histograms')) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
hrbrthemes::theme_ipsum() +
ggplot2::labs(fill="")
suppressMessages(print(p))
}
t_test_two_sample(x1,x2)
x1 <- sample(100)
x1
sample(x1,2)
sample(x1,2,replace = T)
#'function for CLT
#'
#'
clt_transform <- function(x1) {
for (i in 1:2000) {
x2[i] <- sample(x1,20,replace = TRUE)
}
}
x1
hist(x1)
x1_1 <- clt_transform(x1)
warnings()
for (i in 1:2000) {
x2[i] <- sample(x1,20,replace = TRUE)
}
#'function for CLT
#'
#'
clt_transform <- function(x1) {
for (i in 1:2000) {
x2[i] <- sample(x1,20,replace = TRUE)
}
x2
}
x1_1 <- clt_transform(x1)
hist(x1_1)
#'function for CLT
#'
#'
clt_transform <- function(x1) {
for (i in 1:2000) {
x2[i] <- mean(sample(x1,20,replace = TRUE))
}
x2
}
x1_1 <- clt_transform(x1)
hist(x1_1)
hist(x1_1,breaks = 30)
if (clf==T) {
x <- clt_transform(x)
}
#'One Sample t-test
#'
#'Compare the mean of the sample with a value
#'
#'@param x sample
#'@param m0 value to be tested against
#'@return p-value of test along with a histogram
t_test_one_sample <- function(x,m0,clt=F) {
if (clf==T) {
x <- clt_transform(x)
}
m <- mean(x)
sd <- sqrt(sum((m-x)**2)/length(x))
t <- (m-m0)/(sd/sqrt(length(x)))
p_value <- round(2*pt(-abs(t),df=length(x)-1,lower.tail=TRUE),3)
print(paste0("p-value:",p_value," , H_0: sample's true mean is ",m0))
#create histogram
p <- ggplot2::ggplot() +
ggplot2::geom_histogram(aes(x)) +
ggplot2::geom_vline(xintercept = m0) +
ggplot2::ggtitle(label = paste0('Histogram of Sample vs H_0 mean (vline):',as.character(m0))) +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
suppressMessages(print(p))
}
x<-rnorm(100)
hist(x)
t_test_one_sample(x,0)
#'One Sample t-test
#'
#'Compare the mean of the sample with a value
#'
#'@param x sample
#'@param m0 value to be tested against
#'@return p-value of test along with a histogram
t_test_one_sample <- function(x,m0,clf=F) {
if (clf==T) {
x <- clt_transform(x)
}
m <- mean(x)
sd <- sqrt(sum((m-x)**2)/length(x))
t <- (m-m0)/(sd/sqrt(length(x)))
p_value <- round(2*pt(-abs(t),df=length(x)-1,lower.tail=TRUE),3)
print(paste0("p-value:",p_value," , H_0: sample's true mean is ",m0))
#create histogram
p <- ggplot2::ggplot() +
ggplot2::geom_histogram(aes(x)) +
ggplot2::geom_vline(xintercept = m0) +
ggplot2::ggtitle(label = paste0('Histogram of Sample vs H_0 mean (vline):',as.character(m0))) +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
suppressMessages(print(p))
}
t_test_one_sample(x,0,clf=F)
t_test_one_sample(x,0)
#create histogram
p <- ggplot2::ggplot() +
ggplot2::geom_histogram(ggplot2::aes(x)) +
ggplot2::geom_vline(xintercept = m0) +
ggplot2::ggtitle(label = paste0('Histogram of Sample vs H_0 mean (vline):',as.character(m0))) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
#'One Sample t-test
#'
#'Compare the mean of the sample with a value
#'
#'@param x sample
#'@param m0 value to be tested against
#'@return p-value of test along with a histogram
t_test_one_sample <- function(x,m0,clf=F) {
if (clf==T) {
x <- clt_transform(x)
}
m <- mean(x)
sd <- sqrt(sum((m-x)**2)/length(x))
t <- (m-m0)/(sd/sqrt(length(x)))
p_value <- round(2*pt(-abs(t),df=length(x)-1,lower.tail=TRUE),3)
print(paste0("p-value:",p_value," , H_0: sample's true mean is ",m0))
#create histogram
p <- ggplot2::ggplot() +
ggplot2::geom_histogram(ggplot2::aes(x)) +
ggplot2::geom_vline(xintercept = m0) +
ggplot2::ggtitle(label = paste0('Histogram of Sample vs H_0 mean (vline):',as.character(m0))) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
suppressMessages(print(p))
}
t_test_one_sample(x,0)
t_test_one_sample(x,0,clf = T)
t_test_one_sample(x,0)
x
#'One Sample t-test
#'
#'Compare the mean of the sample with a value
#'
#'@param x sample
#'@param m0 value to be tested against
#'@return p-value of test along with a histogram
t_test_one_sample <- function(x,m0,clt=F) {
if (clt==T) {
x <- clt_transform(x)
}
m <- mean(x)
sd <- sqrt(sum((m-x)**2)/length(x))
t <- (m-m0)/(sd/sqrt(length(x)))
p_value <- round(2*pt(-abs(t),df=length(x)-1,lower.tail=TRUE),3)
print(paste0("p-value:",p_value," , H_0: sample's true mean is ",m0))
#create histogram
p <- ggplot2::ggplot() +
ggplot2::geom_histogram(ggplot2::aes(x)) +
ggplot2::geom_vline(xintercept = m0) +
ggplot2::ggtitle(label = paste0('Histogram of Sample vs H_0 mean (vline):',as.character(m0))) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
suppressMessages(print(p))
}
t_test_one_sample(x,0,clt = T)
#'One Sample t-test
#'
#'Compare the mean of the sample with a value
#'
#'@param x sample
#'@param m0 value to be tested against
#'@return p-value of test along with a histogram
t_test_one_sample <- function(x,m0,clt=F) {
if (clt==T) {
x <- clt_transform(x)
}
m <- mean(x)
sd <- sqrt(sum((m-x)**2)/length(x))
t <- (m-m0)/(sd/sqrt(length(x)))
p_value <- round(2*pt(-abs(t),df=length(x)-1,lower.tail=TRUE),3)
print(paste0("p-value:",p_value," , H_0: sample's true mean is ",m0))
#create histogram
p <- ggplot2::ggplot() +
ggplot2::geom_histogram(ggplot2::aes(x)) +
ggplot2::geom_vline(xintercept = m0) +
ggplot2::ggtitle(label = paste0('Histogram of Sample vs H_0 mean (vline):',as.character(m0))) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
suppressMessages(print(p))
}
t_test_one_sample(x,0,clt = T)
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples
#'@return p-value of test along with a histogram
t_test_two_sample <- function(x1,x2) {
m1 <- mean(x1)
m2 <- mean(x2)
sd1 <- sqrt(sum((m1-x1)**2)/length(x1))
sd2 <- sqrt(sum((m2-x2)**2)/length(x2))
m_diff <- m1-m2
sd_pooled <- (((length(x1)-1)*(sd1**2)) + ((length(x2)-1)*(sd2**2)))/ (length(x1)+length(x2)-2)
t <- m_diff/(sqrt(sd_pooled)*sqrt(1/length(x1)+1/length(x2)))
p_value <- round(2*pt(-abs(t),df=length(x1)+length(x2)-2,lower.tail=TRUE),3)
print(paste0("p-value:",p_value," , H_0: samples' mean equal"))
#create histogram
p <- ggplot2::ggplot( data = rbind(data.frame(
group=c(rep("x1",length(x1)),rep("x2",length(x2))),
values=c(x1,x2))),ggplot2::aes(x=values, fill=group)) +
ggplot2::geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
ggplot2::scale_fill_manual(values=c("#69b3a2", "#404080")) +
ggplot2::ggtitle(label = paste0('Side by side Sample histograms')) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
hrbrthemes::theme_ipsum() +
ggplot2::labs(fill="")
suppressMessages(print(p))
}
x <- rnorm(100)
y <- rnorm(100,mean = 0.1)
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples
#'@return p-value of test along with a histogram
t_test_two_sample <- function(x1,x2,clt=F) {
if (clt==T) {
x1 <- clt_transform(x1)
x2 <- clt_transform(x2)
}
m1 <- mean(x1)
m2 <- mean(x2)
sd1 <- sqrt(sum((m1-x1)**2)/length(x1))
sd2 <- sqrt(sum((m2-x2)**2)/length(x2))
m_diff <- m1-m2
sd_pooled <- (((length(x1)-1)*(sd1**2)) + ((length(x2)-1)*(sd2**2)))/ (length(x1)+length(x2)-2)
t <- m_diff/(sqrt(sd_pooled)*sqrt(1/length(x1)+1/length(x2)))
p_value <- round(2*pt(-abs(t),df=length(x1)+length(x2)-2,lower.tail=TRUE),3)
print(paste0("p-value:",p_value," , H_0: samples' mean equal"))
#create histogram
p <- ggplot2::ggplot( data = rbind(data.frame(
group=c(rep("x1",length(x1)),rep("x2",length(x2))),
values=c(x1,x2))),ggplot2::aes(x=values, fill=group)) +
ggplot2::geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
ggplot2::scale_fill_manual(values=c("#69b3a2", "#404080")) +
ggplot2::ggtitle(label = paste0('Side by side Sample histograms')) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
hrbrthemes::theme_ipsum() +
ggplot2::labs(fill="")
suppressMessages(print(p))
}
t_test_two_sample(x,y)
t_test_two_sample(x,y,clt = T)
x <- rnorm(1000)
y <- rnorm(1000)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = F)
t_test_two_sample(x,y,clt = T)
x2[i] <- mean(sample(x1,100,replace = TRUE))
#'Central Limit Theorem transformation
#'
#'We produce
#'
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples
#'@return p-value of test along with a histogram
clt_transform <- function(x1) {
for (i in 1:2000) {
x2[i] <- mean(sample(x1,100,replace = TRUE))
}
x2
}
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = F)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = F)
x <- rnorm(1000)
x <- rnorm(10000)
y <- rnorm(10000,mean = 0.1)
t_test_two_sample(x,y,clt = F)
t_test_two_sample(x,y,clt = T)
y <- rnorm(10000,mean = 0.01)
t_test_two_sample(x,y,clt = F)
t_test_two_sample(x,y,clt = T)
#'Central Limit Theorem transformation
#'
#'We produce
#'
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples
#'@return p-value of test along with a histogram
clt_transform <- function(x1) {
for (i in 1:2000) {
x2[i] <- mean(sample(x1,200,replace = TRUE))
}
x2
}
t_test_two_sample(x,y,clt = F)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
#'Central Limit Theorem transformation
#'
#'We produce
#'
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples
#'@return p-value of test along with a histogram
clt_transform <- function(x1) {
for (i in 1:4000) {
x2[i] <- mean(sample(x1,50,replace = TRUE))
}
x2
}
t_test_two_sample(x,y,clt = F)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = F)
t_test_two_sample(x,y,clt = F)
#'Central Limit Theorem transformation
#'
#'We produce
#'
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples
#'@return p-value of test along with a histogram
clt_transform <- function(x1) {
for (i in 1:4000) {
x2[i] <- mean(sample(x1,200,replace = TRUE))
}
x2
}
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = F)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
#'Central Limit Theorem transformation
#'
#'We produce
#'
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples
#'@return p-value of test along with a histogram
clt_transform <- function(x1) {
for (i in 1:4000) {
x2[i] <- mean(sample(x1,200,replace = F))
}
x2
}
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
length(x)
length(x)
#'Central Limit Theorem transformation
#'
#'We produce
#'
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples
#'@return p-value of test along with a histogram
clt_transform <- function(x1) {
for (i in 1:2000) {
x2[i] <- mean(sample(x1,round(0.1*length(x1)),replace = F))
}
x2
}
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
#'Central Limit Theorem transformation
#'
#'We produce
#'
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples
#'@return p-value of test along with a histogram
clt_transform <- function(x1) {
for (i in 1:2000) {
x2[i] <- mean(sample(x1,round(0.3*length(x1)),replace = F))
}
x2
}
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = F)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y,clt = T)
x1<-x
x1_1 <- sample(x1,round(0.3*length(x1))
)
x1_1 <- sample(x1,round(0.3*length(x1)),replace = F)
length(x1_1)
x <- rnorm(10000)
x <- rnorm(10000,mean=1)
x <- rnorm(10000,mean=1)
y <- rnorm(10000,mean=0)
t_test_two_sample(x,y)
t_test_two_sample(x,y,clt = T)
t_test_two_sample(x,y)
t_test_two_sample(x,y,clt = T)
y <- rnorm(10000,mean=0)
x <- rnorm(10000,mean=0.2)
t_test_two_sample(x,y)
t_test_two_sample(x,y,clt = T)
power.prop.test(p1=.2,p2=.1,power=.8)
power.prop.test(p1=.11,p2=.1,power=.8)
devtools::install_github("pkara/abtest")
devtools::install_github("pkaram/abtest")
library(devtools)
install_github("pkaram/abtest")
