remove.packages("abtest")
runshinyapp()
devtools::install()
runshinyapp()
remove.packages("abtest")
devtools::document()
devtools::install_github("pkaram/abtest")
abtest::runshinyapp()
devtools::document()
remove.packages("abtest")
devtools::install_github("pkaram/abtest")
abtest::runshinyapp()
abtest::runshinyapp()
runApp('shiny_apps/webapp')
x1<-1
x2<-2
available_objects <- ls()
available_objects
runApp('shiny_apps/webapp')
class(x1)
x1 <- rnorm(1000)
class(x1)
#list all vectors
temp<-ls()[sapply(ls(), function(x) class(get(x))) == 'data.frame']
temp
test1 <- data.frame(mtcars)
test2 <- data.frame(flights)
test2 <- data.frame(Titanic)
#list all vectors
temp<-ls()[sapply(ls(), function(x) class(get(x))) == 'data.frame']
View(test2)
#list all vectors
temp<-ls()[sapply(ls(), function(x) class(get(x))) == 'data.frame']
temp
runApp('shiny_apps/webapp')
x <- rnorm(1000)
y <- rnorm(2000)
y <- rnorm(2000,mean = 0.1)
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
#list all dataframes that are available in the global environment
temp<-ls()[sapply(ls(), function(x) class(get(x))) == 'numeric']
temp
x
class(x)
class(<)
class(y)
x <- rnorm(1000)
y <- rnorm(2000,mean=0.1)
runApp('shiny_apps/webapp')
y1 <- rnorm(1000)
y2 <- rnorm(2000,mean = 0.1)
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
temp
runApp('shiny_apps/webapp')
remove.packages("abtest")
.GlobalEnv
.GlobalEnv$y1
.GlobalEnv$`y1`
#'One Sample t-test
#'
#'Compare the mean of the sample with a value
#'
#'@param x sample
#'@param m0 value to be tested against
#'@param clt applies or not clt_transform function
#'@return p-value of test along with a histogram
t_test_one_sample <- function(x,m0,clt=F,...) {
if (clt==T) {
kwargs <- list(...)
if (is.null(kwargs$outcome)) {
x <- clt_transform(x)
} else {
x <- clt_transform(x,outcome = kwargs$outcome,n=kwargs$n)
}
}
m <- mean(x)
sd <- sqrt(sum((m-x)**2)/length(x))
t <- (m-m0)/(sd/sqrt(length(x)))
p_value <- round(2*pt(-abs(t),df=length(x)-1,lower.tail=TRUE),3)
l <- list()
l$result <- paste0("p-value:",p_value," , H_0: sample's true mean is ",m0)
#create histogram
p <- ggplot2::ggplot() +
ggplot2::geom_histogram(ggplot2::aes(x)) +
ggplot2::geom_vline(xintercept = m0) +
ggplot2::ggtitle(label = paste0('Histogram of Sample vs H_0 mean (vline):',as.character(m0))) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
l$plot <- p
return(l)
}
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples to be compared
#'@param clt applies or not clt_transform function
#'@return p-value of test along with a histogram
t_test_two_sample <- function(x1,x2,clt=F,...) {
if (clt==T) {
kwargs <- list(...)
if (is.null(kwargs$outcome)) {
x1 <- clt_transform(x1)
x2 <- clt_transform(x2)
} else {
x1 <- clt_transform(x1,outcome = kwargs$outcome,n=kwargs$n)
x2 <- clt_transform(x2,outcome = kwargs$outcome,n=kwargs$n)
}
}
m1 <- mean(x1)
m2 <- mean(x2)
sd1 <- sqrt(sum((m1-x1)**2)/length(x1))
sd2 <- sqrt(sum((m2-x2)**2)/length(x2))
m_diff <- m1-m2
sd_pooled <- (((length(x1)-1)*(sd1**2)) + ((length(x2)-1)*(sd2**2)))/ (length(x1)+length(x2)-2)
t <- m_diff/(sqrt(sd_pooled)*sqrt(1/length(x1)+1/length(x2)))
p_value <- round(2*pt(-abs(t),df=length(x1)+length(x2)-2,lower.tail=TRUE),3)
l <- list()
l$result <- print(paste0("p-value:",p_value," , H_0: samples' mean equal"))
#create histogram
p <- ggplot2::ggplot( data = rbind(data.frame(
group=c(rep("x1",length(x1)),rep("x2",length(x2))),
values=c(x1,x2))),ggplot2::aes(x=values, fill=group)) +
ggplot2::geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
ggplot2::scale_fill_manual(values=c("#69b3a2", "#404080")) +
ggplot2::ggtitle(label = paste0('Side by side Sample histograms')) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
hrbrthemes::theme_ipsum() +
ggplot2::labs(fill="")
l$plot <- p
}
#'Central Limit Theorem transformation
#'
#'According to CLT we sample multiple times to produce a vector of sample means
#'
#'@param x data to be transformed
#'@param outcome 'continuous'/'dichotomous' depending on the related outcome
#'@return vector of means based on sampling according to CLT
clt_transform <- function(x,outcome='continuous',...) {
kwargs=list(...)
if (outcome=='continuous') {
#condition to use CLT
if (length(x)>=31) {
z <- NULL
set.seed(3)
for (i in 1:2000) {
#according to CLT samples should be sufficiently large, n>=30, with replacement
z[i] <- mean(sample(x,30,replace = T))
}
return(z)
} else {
stop('sample size n < 31')
}
} else if (outcome=='dichotomous') {
n=kwargs$n
#success for any given trial
p=sum(x)/length(x)
#condition to use CLT
if (min(c(n*p,n*(1-p)))>5) {
z <- NULL
set.seed(3)
for (i in 1:2000) {
#according to CLT samples should be sufficiently large, n>=30, with replacement
s <- sample(x,n,replace = T)
z[i] <- sum(s)/length(s)
}
return(z)
} else {
stop('min(np,n(1-p)) <= 5 for n selected')
}
}
}
t_test_one_sample(y1,0.1)
gg<-t_test_one_sample(y1,0.1)
gg<-t_test_two_sample(y1,y2)
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples to be compared
#'@param clt applies or not clt_transform function
#'@return p-value of test along with a histogram
t_test_two_sample <- function(x1,x2,clt=F,...) {
if (clt==T) {
kwargs <- list(...)
if (is.null(kwargs$outcome)) {
x1 <- clt_transform(x1)
x2 <- clt_transform(x2)
} else {
x1 <- clt_transform(x1,outcome = kwargs$outcome,n=kwargs$n)
x2 <- clt_transform(x2,outcome = kwargs$outcome,n=kwargs$n)
}
}
m1 <- mean(x1)
m2 <- mean(x2)
sd1 <- sqrt(sum((m1-x1)**2)/length(x1))
sd2 <- sqrt(sum((m2-x2)**2)/length(x2))
m_diff <- m1-m2
sd_pooled <- (((length(x1)-1)*(sd1**2)) + ((length(x2)-1)*(sd2**2)))/ (length(x1)+length(x2)-2)
t <- m_diff/(sqrt(sd_pooled)*sqrt(1/length(x1)+1/length(x2)))
p_value <- round(2*pt(-abs(t),df=length(x1)+length(x2)-2,lower.tail=TRUE),3)
l <- list()
l$result <- paste0("p-value:",p_value," , H_0: samples' mean equal")
#create histogram
p <- ggplot2::ggplot( data = rbind(data.frame(
group=c(rep("x1",length(x1)),rep("x2",length(x2))),
values=c(x1,x2))),ggplot2::aes(x=values, fill=group)) +
ggplot2::geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
ggplot2::scale_fill_manual(values=c("#69b3a2", "#404080")) +
ggplot2::ggtitle(label = paste0('Side by side Sample histograms')) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
hrbrthemes::theme_ipsum() +
ggplot2::labs(fill="")
l$plot <- p
}
gg<-t_test_two_sample(y1,y2)
gg
gg
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples to be compared
#'@param clt applies or not clt_transform function
#'@return p-value of test along with a histogram
t_test_two_sample <- function(x1,x2,clt=F,...) {
if (clt==T) {
kwargs <- list(...)
if (is.null(kwargs$outcome)) {
x1 <- clt_transform(x1)
x2 <- clt_transform(x2)
} else {
x1 <- clt_transform(x1,outcome = kwargs$outcome,n=kwargs$n)
x2 <- clt_transform(x2,outcome = kwargs$outcome,n=kwargs$n)
}
}
m1 <- mean(x1)
m2 <- mean(x2)
sd1 <- sqrt(sum((m1-x1)**2)/length(x1))
sd2 <- sqrt(sum((m2-x2)**2)/length(x2))
m_diff <- m1-m2
sd_pooled <- (((length(x1)-1)*(sd1**2)) + ((length(x2)-1)*(sd2**2)))/ (length(x1)+length(x2)-2)
t <- m_diff/(sqrt(sd_pooled)*sqrt(1/length(x1)+1/length(x2)))
p_value <- round(2*pt(-abs(t),df=length(x1)+length(x2)-2,lower.tail=TRUE),3)
l <- list()
l$result <- paste0("p-value:",p_value," , H_0: samples' mean equal")
#create histogram
p <- ggplot2::ggplot( data = rbind(data.frame(
group=c(rep("x1",length(x1)),rep("x2",length(x2))),
values=c(x1,x2))),ggplot2::aes(x=values, fill=group)) +
ggplot2::geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
ggplot2::scale_fill_manual(values=c("#69b3a2", "#404080")) +
ggplot2::ggtitle(label = paste0('Side by side Sample histograms')) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
hrbrthemes::theme_ipsum() +
ggplot2::labs(fill="")
l$plot <- p
return(l)
}
gg
gg<-t_test_two_sample(y1,y2)
gg
gg<-t_test_two_sample(y1,y2,clt = T)
gg
runApp('shiny_apps/webapp')
get('y1')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
test <- get('y1')
runApp('shiny_apps/webapp')
test <- objects()
test
get("tets")
get("test")
get("y1")
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
rm(t_test_one_sample())
y1 <- rnorm(1000)
y2 <- rnorm(1000,mean=0.2)
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
#'One Sample t-test
#'
#'Compare the mean of the sample with a value
#'
#'@param x sample
#'@param m0 value to be tested against
#'@param clt applies or not clt_transform function
#'@return p-value of test along with a histogram
t_test_one_sample <- function(x,m0,clt=F,...) {
if (clt==T) {
kwargs <- list(...)
if (is.null(kwargs$outcome)) {
x <- clt_transform(x)
} else {
x <- clt_transform(x,outcome = kwargs$outcome,n=kwargs$n)
}
}
m <- mean(x)
sd <- sqrt(sum((m-x)**2)/length(x))
t <- (m-m0)/(sd/sqrt(length(x)))
p_value <- round(2*pt(-abs(t),df=length(x)-1,lower.tail=TRUE),3)
l <- list()
l$result <- paste0("p-value:",p_value," , H_0: sample's true mean is ",m0)
#create histogram
p <- ggplot2::ggplot() +
ggplot2::geom_histogram(ggplot2::aes(x)) +
ggplot2::geom_vline(xintercept = m0) +
ggplot2::ggtitle(label = paste0('Histogram of Sample vs H_0 mean (vline):',as.character(m0))) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
l$plot <- p
return(l)
}
#'Two Sample t-test
#'
#'Compare the means of two samples
#'
#'@param x1,x2 samples to be compared
#'@param clt applies or not clt_transform function
#'@return p-value of test along with a histogram
t_test_two_sample <- function(x1,x2,clt=F,...) {
if (clt==T) {
kwargs <- list(...)
if (is.null(kwargs$outcome)) {
x1 <- clt_transform(x1)
x2 <- clt_transform(x2)
} else {
x1 <- clt_transform(x1,outcome = kwargs$outcome,n=kwargs$n)
x2 <- clt_transform(x2,outcome = kwargs$outcome,n=kwargs$n)
}
}
m1 <- mean(x1)
m2 <- mean(x2)
sd1 <- sqrt(sum((m1-x1)**2)/length(x1))
sd2 <- sqrt(sum((m2-x2)**2)/length(x2))
m_diff <- m1-m2
sd_pooled <- (((length(x1)-1)*(sd1**2)) + ((length(x2)-1)*(sd2**2)))/ (length(x1)+length(x2)-2)
t <- m_diff/(sqrt(sd_pooled)*sqrt(1/length(x1)+1/length(x2)))
p_value <- round(2*pt(-abs(t),df=length(x1)+length(x2)-2,lower.tail=TRUE),3)
l <- list()
l$result <- paste0("p-value:",p_value," , H_0: samples' mean equal")
#create histogram
p <- ggplot2::ggplot( data = rbind(data.frame(
group=c(rep("x1",length(x1)),rep("x2",length(x2))),
values=c(x1,x2))),ggplot2::aes(x=values, fill=group)) +
ggplot2::geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
ggplot2::scale_fill_manual(values=c("#69b3a2", "#404080")) +
ggplot2::ggtitle(label = paste0('Side by side Sample histograms')) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
hrbrthemes::theme_ipsum() +
ggplot2::labs(fill="")
l$plot <- p
return(l)
}
#'Central Limit Theorem transformation
#'
#'According to CLT we sample multiple times to produce a vector of sample means
#'
#'@param x data to be transformed
#'@param outcome 'continuous'/'dichotomous' depending on the related outcome
#'@return vector of means based on sampling according to CLT
clt_transform <- function(x,outcome='continuous',...) {
kwargs=list(...)
if (outcome=='continuous') {
#condition to use CLT
if (length(x)>=31) {
z <- NULL
set.seed(3)
for (i in 1:2000) {
#according to CLT samples should be sufficiently large, n>=30, with replacement
z[i] <- mean(sample(x,30,replace = T))
}
return(z)
} else {
stop('sample size n < 31')
}
} else if (outcome=='dichotomous') {
n=kwargs$n
#success for any given trial
p=sum(x)/length(x)
#condition to use CLT
if (min(c(n*p,n*(1-p)))>5) {
z <- NULL
set.seed(3)
for (i in 1:2000) {
#according to CLT samples should be sufficiently large, n>=30, with replacement
s <- sample(x,n,replace = T)
z[i] <- sum(s)/length(s)
}
return(z)
} else {
stop('min(np,n(1-p)) <= 5 for n selected')
}
}
}
t_test_two_sample(y1,y2,clt=T)
t_test_one_sample(y1,0.1,clt=T)
gg<-t_test_one_sample(y1,0.1,clt=T)
gg$result[1]
gg$result
ggg <-t_test_two_sample(y1,y2,clt=T)
ggg$result
ggg$result[1]
runApp('shiny_apps/webapp')
remove.packages("abtest")
shiny::runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
x1 <- rnorm(1000)
x2 <- rnorm(1000,mean = 0.3)
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
?validate
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
list.files(system.file('shiny-apps'))
#'Runs AB test shiny app
#'
#'Shiny App as a tool to perform AB test
#'
#'@return web app
runshinyapp <- function() {
appDir <- system.file("shiny_apps", "webapp", package = "abtest")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `abtest`.", call. = FALSE)
}
shiny::runApp(appDir,display.mode = 'normal')
}
runshinyapp()
devtools::document()
devtools::install()
library(abtest)
runshinyapp()
source('~/DS_projects/abtest/R/shinyapp.R')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
system.file("shiny_apps", "webapp", package = "abtest")
devtools::install()
library(abtest)
remove.packages("abtest")
x1 <- rnorm(1000)
x2 <- rnorm(2000,mean=0.2)
shiny::runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
devtools::document()
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
RM(X1)
rm(x1)
rm(x2)
y1 <- rnorm(1000)
y2 <- rnorm(1000,mean = 0.3)
runApp('shiny_apps/webapp')
devtools::document()
remove.packages("abtest")
devtools::install_github("pkaram/abtest")
library(abtest)
abtest::runshinyapp()
runApp('shiny_apps/webapp')
y3 <- sample(c(0,1),1000,replace = T)
y4 <- sample(c(0,1),1000,replace = T)
abtest::t_test_two_sample(y3,y4,clt = T,outcom='dichotomous')
#list all available variables that are available in the global environment
available_variables<-ls()[sapply(ls(), function(x) class(get(x))) == 'numeric']
available_variables
runApp('shiny_apps/webapp')
runApp('shiny_apps/webapp')
y3 <- as.integer(y3)
y4 <- as.integer(y4)
runApp('shiny_apps/webapp')
class(get(y3))) %in% c('numeric','integer')
class(get(y3)) %in% c('numeric','integer')
class(get(y3))
class(y3)
runApp('shiny_apps/webapp')
devtools::document()
remove.packages("abtest")
devtools::install_github("pkaram/abtest")
library(abtest)
abtest::runshinyapp()
